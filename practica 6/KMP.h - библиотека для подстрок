//Эта функция возвращает номер строки, с которого начинается найденная подстрока, если подстрока не найдена, то возвращает -1
//Использует алгоритм Кнута-Морриса-Пратта
//Есть предположение,что не работает с кириллицей. Предположение неверно. 

#include <iostream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <windows.h>

using namespace std;
int seek_substring_KMP (char s[], char q[])
	{
	int i, j, N, M;
	N = strlen(s);
	M = strlen(q);
	int *d =(int*)malloc(M*sizeof(int));
	i=0;
	j=-1;
	d[0]=-1;
	while(i<M-1)
		{
		while((j>=0) && (q[j]!=q[i]))
			j = d[j];
		i++;
		j++;
		if(q[i]==q[j])
			d[i]=d[j];
		else
			d[i]= j;
		}
	for(i=0,j=0;(i<N)&&(j<M); i++,j++)
		while((j>=0)&&(q[j]!=s[i]))
			j=d[j];
	free (d);
	if (j==M)
		return i-j;
	else 
		return -1;
	};
//Функция возвращает 0, если буква строчная, 1 - если заглавная
//Теперь работает и с кириллицей

int seek_glav_neglav__word(char x)
{
    if (x=='a') return 0;
    if (x=='b') return 0;
    if (x=='c') return 0;
    if (x=='d') return 0;
    if (x=='e') return 0;
    if (x=='f') return 0;
    if (x=='g') return 0;
    if (x=='h') return 0;
    if (x=='i') return 0;
    if (x=='j') return 0;
    if (x=='k') return 0;
    if (x=='l') return 0;
    if (x=='m') return 0;
    if (x=='n') return 0;
    if (x=='o') return 0;
    if (x=='p') return 0;
    if (x=='q') return 0;
    if (x=='r') return 0;
    if (x=='s') return 0;
    if (x=='t') return 0;
    if (x=='u') return 0;
    if (x=='v') return 0;
    if (x=='w') return 0;
    if (x=='x') return 0;
    if (x=='y') return 0;
    if (x=='z') return 0;
    if (x=='A') return 1;
    if (x=='B') return 1;
    if (x=='C') return 1;
    if (x=='D') return 1;
    if (x=='E') return 1;
    if (x=='F') return 1;
    if (x=='G') return 1;
    if (x=='H') return 1;
    if (x=='I') return 1;
    if (x=='J') return 1;
    if (x=='K') return 1;
    if (x=='L') return 1;
    if (x=='M') return 1;
    if (x=='N') return 1;
    if (x=='O') return 1;
    if (x=='P') return 1;
    if (x=='Q') return 1;
    if (x=='R') return 1;
    if (x=='S') return 1;
    if (x=='T') return 1;
    if (x=='U') return 1;
    if (x=='V') return 1;
    if (x=='W') return 1;
    if (x=='X') return 1;
    if (x=='Y') return 1;
    if (x=='Z') return 1;
    if (x=='а') return 0;
    if (x=='б') return 0;
    if (x=='в') return 0;
    if (x=='г') return 0;
    if (x=='д') return 0;
    if (x=='е') return 0;
    if (x=='ё') return 0;
    if (x=='ж') return 0;
    if (x=='з') return 0;
    if (x=='и') return 0;
    if (x=='й') return 0;
    if (x=='к') return 0;
    if (x=='л') return 0;
    if (x=='м') return 0;
    if (x=='н') return 0;
    if (x=='о') return 0;
    if (x=='п') return 0;
    if (x=='р') return 0;
    if (x=='с') return 0;
    if (x=='т') return 0;
    if (x=='у') return 0;
    if (x=='ф') return 0;
    if (x=='х') return 0;
    if (x=='ц') return 0;
    if (x=='ч') return 0;
    if (x=='ш') return 0;
    if (x=='щ') return 0;
    if (x=='ь') return 0;
    if (x=='ы') return 0;
    if (x=='ъ') return 0;
    if (x=='э') return 0;
    if (x=='ю') return 0;
    if (x=='я') return 0;
    if (x=='А') return 1;
    if (x=='Б') return 1;
    if (x=='В') return 1;
    if (x=='Г') return 1;
    if (x=='Д') return 1;
    if (x=='Е') return 1;
    if (x=='Ё') return 1;
    if (x=='Ж') return 1;
    if (x=='З') return 1;
    if (x=='И') return 1;
    if (x=='Й') return 1;
    if (x=='К') return 1;
    if (x=='Л') return 1;
    if (x=='М') return 1;
    if (x=='Н') return 1;
    if (x=='О') return 1;
    if (x=='П') return 1;
    if (x=='Р') return 1;
    if (x=='С') return 1;
    if (x=='Е') return 1;
    if (x=='У') return 1;
    if (x=='Ф') return 1;
    if (x=='Х') return 1;
    if (x=='Ц') return 1;
    if (x=='Ч') return 1;
    if (x=='Ш') return 1;
    if (x=='Щ') return 1;
    if (x=='Ь') return 1;
    if (x=='Ы') return 1;
    if (x=='Ъ') return 1;
    if (x=='Э') return 1;
    if (x=='Ю') return 1;
    if (x=='Я') return 1;
}

//Функция меняет цвет выводящихся на консоль букв и фона консоли

using namespace std;

enum ConsoleColor
{
    Black         = 0,
    Blue          = 1,
    Green         = 2,
    Cyan          = 3,
    Red           = 4,
    Magenta       = 5,
    Brown         = 6,
    LightGray     = 7,
    DarkGray      = 8,
    LightBlue     = 9,
    LightGreen    = 10,
    LightCyan     = 11,
    LightRed      = 12,
    LightMagenta  = 13,
    Yellow        = 14,
    White         = 15
};
void SetColor(int text, int background)
{
   HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
   SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}

//Новая процедура. Если слово начинается с маленькой буквы, то меняет все буквы слова на маленькие буквы и наоборот.Работает только с латиницей.

void replace_word_glav_neglav(int glav_neglav,char* x,int index_seek)//Принимает в себя (большая или маленькая буква; текст; индекс в тексте, с которого начинается замена)
{
    if (glav_neglav==0)
    {
        for (int i =index_seek; x[i]!=' ';i++)
        {
            if (x[i]=='A') x[i]='a' ;
            if (x[i]=='B') x[i]='b';
            if (x[i]=='C') x[i]='c';
            if (x[i]=='D') x[i]='d';
            if (x[i]=='E') x[i]='e';
            if (x[i]=='F') x[i]='f';
            if (x[i]=='G') x[i]='g';
            if (x[i]=='H') x[i]='h';
            if (x[i]=='I') x[i]='i';
            if (x[i]=='J') x[i]='j';
            if (x[i]=='K') x[i]='k';
            if (x[i]=='L') x[i]='l';
            if (x[i]=='M') x[i]='m';
            if (x[i]=='N') x[i]='n';
            if (x[i]=='O') x[i]='o';
            if (x[i]=='P') x[i]='p';
            if (x[i]=='Q') x[i]='q';
            if (x[i]=='R') x[i]='r';
            if (x[i]=='S') x[i]='s';
            if (x[i]=='T') x[i]='t';
            if (x[i]=='U') x[i]='u';
            if (x[i]=='V') x[i]='v';
            if (x[i]=='W') x[i]='w';
            if (x[i]=='X') x[i]='x';
            if (x[i]=='Y') x[i]='y';
            if (x[i]=='Z') x[i]='z';
        };
    }
    else
    {
        for (int i =index_seek; x[i]!=' ';i++)
        {
            if (x[i]=='a') x[i]='A' ;
            if (x[i]=='b') x[i]='B';
            if (x[i]=='c') x[i]='C';
            if (x[i]=='d') x[i]='D';
            if (x[i]=='e') x[i]='E';
            if (x[i]=='f') x[i]='F';
            if (x[i]=='g') x[i]='G';
            if (x[i]=='h') x[i]='H';
            if (x[i]=='i') x[i]='I';
            if (x[i]=='j') x[i]='J';
            if (x[i]=='k') x[i]='K';
            if (x[i]=='l') x[i]='L';
            if (x[i]=='m') x[i]='M';
            if (x[i]=='n') x[i]='N';
            if (x[i]=='o') x[i]='O';
            if (x[i]=='p') x[i]='P';
            if (x[i]=='q') x[i]='Q';
            if (x[i]=='r') x[i]='R';
            if (x[i]=='s') x[i]='S';
            if (x[i]=='t') x[i]='T';
            if (x[i]=='u') x[i]='U';
            if (x[i]=='v') x[i]='V';
            if (x[i]=='w') x[i]='W';
            if (x[i]=='x') x[i]='X';
            if (x[i]=='y') x[i]='Y';
            if (x[i]=='z') x[i]='Z';
        };
    };
};
